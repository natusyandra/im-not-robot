
import Foundation
import UIKit
import SnapKit

class GameViewController: UIViewController {
    
    var numberArray = ["1","2","3","4","5","6","7","8","9"]
    
    let rolesLabel: UILabel  = {
        let label = UILabel()
        label.backgroundColor = Pallete.grayLabel
        label.textColor = .white
        label.font = UIFont(name:"STHeitiTC-Medium", size: 120.0)
        label.textAlignment = .center
        label.numberOfLines = 0
        label.layer.masksToBounds = true
        label.layer.cornerRadius = 10
//        label.layer.borderWidth = 5.0
        label.isHidden = true
        return label
    }()
    
    let nextHideButton: MyButton = {
        let button = MyButton()
        button.setTitle("–ü–æ–∫–∞–∑–∞—Ç—å üëâ", for: .normal)
        return button
    }()
    
    public var numberOfPlayers: Int = 0 {
        didSet {
            title = "–ò–≥—Ä–æ–∫–æ–≤: \(numberOfPlayers)"
        }
    }
    
    public var isGameWithServer: Bool = false
    
    private var arrayOfShuffledCards: [String] = []
    
    private var randomNumberSave: String = ""
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .systemBackground
        addSubviews()
        layoutConstraints()
        startNewGame()
        nextHideButton.addTarget(self,
                                 action: #selector(showHideCard),
                                 for: .touchUpInside)
    }
    
    func addSubviews() {
        view.addSubview(rolesLabel)
        view.addSubview(nextHideButton)
    }
    
    func layoutConstraints() {
            rolesLabel.snp.makeConstraints  {
                $0.top.equalTo(view.safeAreaLayoutGuide.snp.top)
                $0.bottom.equalTo(nextHideButton.snp.top).offset(-10)
                $0.left.equalTo(view.snp.left).offset(16)
                $0.right.equalTo(view.snp.right).offset(-16)
                
                nextHideButton.snp.makeConstraints {
//                    $0.top.equalTo(rolesLabel.snp.bottom).offset(40)
                    $0.height.equalTo(50)
                    $0.left.equalTo(view.snp.left).offset(16)
                    $0.right.equalTo(view.snp.right).offset(-16)
                    $0.bottom.equalTo(view.safeAreaLayoutGuide.snp.bottom).offset(-20)
                }
            }
        }
    
    func startNewGame() {
        // –¢—É—Ç –∑–∞–¥–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
        let randomNumber = numberArray.randomElement()!
        var arrayOfCards: [String] = ["404"]
        //–ï—Å–ª–∏ isGameWithServer true —Ç–æ peremennay = 0, –∏–Ω–∞—á–µ 1
        let peremennay = isGameWithServer ? 0 : 1
        for _ in 1...numberOfPlayers - peremennay {
            arrayOfCards.append(randomNumber)
        }
        arrayOfCards.shuffle()
        arrayOfShuffledCards = arrayOfCards
        randomNumberSave = randomNumber
        rolesLabel.text = arrayOfShuffledCards.popLast()
    }
    
    @objc func showHideCard() {
        if rolesLabel.isHidden {
            rolesLabel.isHidden = false
            nextHideButton.setTitle("–°–∫—Ä—ã—Ç—å üëá", for: .normal)
        } else {
            hideCard()
        }
    }
    
    func isAllCardShowed() -> Bool {
        if isGameWithServer {
            return (arrayOfShuffledCards.count == 1)
        } else {
            return arrayOfShuffledCards.isEmpty
        }
    }
    
    func hideCard() {
        // –ï—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ–∫–∞–∂–∏ "–ê –≤—Å–µ", –∞ –∏–Ω–∞—á–µ –ø—Ä–∏—Å–≤–æ–π —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–µ–π–±–ª—É –∏ —É–¥–∞–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π, —Å–∫—Ä–æ–π –ª–µ–π–±–ª –∏ –ø—Ä–∏—Å–≤–æ–π –∫–Ω–æ–ø–∫–µ ,–ü–æ–∫–∞–∑–∞—Ç—å,
        if isAllCardShowed() {
            rolesLabel.text = "–ê –≤—Å—ë ‚õî"
            nextHideButton.setTitle("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", for: .normal)
            nextHideButton.backgroundColor = .systemRed
            showAnswer()
        } else {
            rolesLabel.text = arrayOfShuffledCards.removeFirst()
            rolesLabel.isHidden = true
            nextHideButton.setTitle("–ü–æ–∫–∞–∑–∞—Ç—å üëâ", for: .normal)
        }
    }
    
    func showAnswer() {
        nextHideButton.addTarget(self,
                                 action: #selector(showCorrectNumber),
                                 for: .touchUpInside)
    }
    
    @objc func showCorrectNumber() {
        rolesLabel.text = randomNumberSave.description
        if isGameWithServer == true {
            changeOptions() 
            nextHideButton.setTitle("–†–æ–±–æ—Ç —Å—Ä–µ–¥–∏ –Ω–∞—Å?", for: .normal)
            showServer()
        } else {
            changeOptions()
            nextHideButton.setTitle("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!", for: .normal)
            newGame()
        }
    }
    
    func showServer() {
        nextHideButton.addTarget(self,
                                 action: #selector(showGameWithServer),
                                 for: .touchUpInside)
    }
    
    func changeOptions() {
        rolesLabel.backgroundColor = .systemRed
        rolesLabel.text = "–û—Ç–≤–µ—Ç: \(randomNumberSave.description)"
        rolesLabel.font = UIFont(name:"STHeitiTC-Medium", size: 50.0)
        nextHideButton.backgroundColor = .black
    }
    
    @objc func showGameWithServer() {
        rolesLabel.backgroundColor = .black
        nextHideButton.backgroundColor = .black
        nextHideButton.setTitle("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!", for: .normal)
        newGame()
        textWasRobot()
    }
    
    func textWasRobot() {
//        if arrayOfShuffledCards.contains("404") {
        if arrayOfShuffledCards.last == "404" {
            rolesLabel.font = UIFont(name:"STHeitiTC-Medium", size: 50.0)
            rolesLabel.text = "–†–æ–±–æ—Ç –æ—Å—Ç–∞–ª—Å—è –∑–¥–µ—Å—å! ü§ñ"
        } else {
            rolesLabel.font = UIFont(name:"STHeitiTC-Medium", size: 50.0)
            rolesLabel.text = "–†–æ–±–æ—Ç —Å—Ä–µ–¥–∏ –≤–∞—Å üò±"
        }
    }
    
    func newGame() {
        nextHideButton.addTarget(self,
                                 action: #selector(openHelloViewController),
                                 for: .touchUpInside)
        print(arrayOfShuffledCards)
    }
    
    @objc func openHelloViewController() {
        navigationController?.popViewController(animated: true)
    }
}
